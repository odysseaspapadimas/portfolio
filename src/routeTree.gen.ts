/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FoundersRouteImport } from './routes/founders'
import { Route as BusinessRouteImport } from './routes/business'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ContactRouteRouteImport } from './routes/contact/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ContactIndexRouteImport } from './routes/contact/index'
import { Route as ContactSuccessRouteImport } from './routes/contact/success'
import { Route as CaseStudiesBrainrotRouteImport } from './routes/case-studies.brainrot'

const FoundersRoute = FoundersRouteImport.update({
  id: '/founders',
  path: '/founders',
  getParentRoute: () => rootRouteImport,
} as any)
const BusinessRoute = BusinessRouteImport.update({
  id: '/business',
  path: '/business',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRouteRoute = ContactRouteRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactIndexRoute = ContactIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ContactRouteRoute,
} as any)
const ContactSuccessRoute = ContactSuccessRouteImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => ContactRouteRoute,
} as any)
const CaseStudiesBrainrotRoute = CaseStudiesBrainrotRouteImport.update({
  id: '/case-studies/brainrot',
  path: '/case-studies/brainrot',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/contact': typeof ContactRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/business': typeof BusinessRoute
  '/founders': typeof FoundersRoute
  '/case-studies/brainrot': typeof CaseStudiesBrainrotRoute
  '/contact/success': typeof ContactSuccessRoute
  '/contact/': typeof ContactIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/business': typeof BusinessRoute
  '/founders': typeof FoundersRoute
  '/case-studies/brainrot': typeof CaseStudiesBrainrotRoute
  '/contact/success': typeof ContactSuccessRoute
  '/contact': typeof ContactIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/contact': typeof ContactRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/business': typeof BusinessRoute
  '/founders': typeof FoundersRoute
  '/case-studies/brainrot': typeof CaseStudiesBrainrotRoute
  '/contact/success': typeof ContactSuccessRoute
  '/contact/': typeof ContactIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/contact'
    | '/about'
    | '/business'
    | '/founders'
    | '/case-studies/brainrot'
    | '/contact/success'
    | '/contact/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/business'
    | '/founders'
    | '/case-studies/brainrot'
    | '/contact/success'
    | '/contact'
  id:
    | '__root__'
    | '/'
    | '/contact'
    | '/about'
    | '/business'
    | '/founders'
    | '/case-studies/brainrot'
    | '/contact/success'
    | '/contact/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ContactRouteRoute: typeof ContactRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  BusinessRoute: typeof BusinessRoute
  FoundersRoute: typeof FoundersRoute
  CaseStudiesBrainrotRoute: typeof CaseStudiesBrainrotRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/founders': {
      id: '/founders'
      path: '/founders'
      fullPath: '/founders'
      preLoaderRoute: typeof FoundersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/business': {
      id: '/business'
      path: '/business'
      fullPath: '/business'
      preLoaderRoute: typeof BusinessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact/': {
      id: '/contact/'
      path: '/'
      fullPath: '/contact/'
      preLoaderRoute: typeof ContactIndexRouteImport
      parentRoute: typeof ContactRouteRoute
    }
    '/contact/success': {
      id: '/contact/success'
      path: '/success'
      fullPath: '/contact/success'
      preLoaderRoute: typeof ContactSuccessRouteImport
      parentRoute: typeof ContactRouteRoute
    }
    '/case-studies/brainrot': {
      id: '/case-studies/brainrot'
      path: '/case-studies/brainrot'
      fullPath: '/case-studies/brainrot'
      preLoaderRoute: typeof CaseStudiesBrainrotRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ContactRouteRouteChildren {
  ContactSuccessRoute: typeof ContactSuccessRoute
  ContactIndexRoute: typeof ContactIndexRoute
}

const ContactRouteRouteChildren: ContactRouteRouteChildren = {
  ContactSuccessRoute: ContactSuccessRoute,
  ContactIndexRoute: ContactIndexRoute,
}

const ContactRouteRouteWithChildren = ContactRouteRoute._addFileChildren(
  ContactRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ContactRouteRoute: ContactRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  BusinessRoute: BusinessRoute,
  FoundersRoute: FoundersRoute,
  CaseStudiesBrainrotRoute: CaseStudiesBrainrotRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
